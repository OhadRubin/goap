# NPC Logic in Game Engines: Goal-Oriented Action Planning (GOAP)

Goal-Oriented Action Planning (GOAP) is one of the most powerful AI systems used for modeling NPCs in modern game engines. Here's a breakdown of how it works:

## Core Principles of GOAP

GOAP is built around representing AI behavior as a planning problem with:

1. **World States** - The current state of the game world represented as key-value pairs
2. **Goals** - Desired world states the NPC wants to achieve
3. **Actions** - Discrete behaviors with:
   - Preconditions (what must be true to perform the action)
   - Effects (how the action changes the world state)
   - Cost (resources/time required)

## How GOAP Works

1. The system begins with the current world state and a goal state
2. A planning algorithm (often A*) searches for the lowest-cost sequence of actions that transforms the current state into the goal state
3. The NPC executes this plan, monitoring for changes that might invalidate it
4. If the plan becomes invalid, the system replans based on the new world state

## Advantages of GOAP

- **Emergent Behavior**: Complex behavior emerges from simple goals and actions
- **Decoupled Design**: Actions and goals can be created independently
- **Adaptability**: NPCs can find alternative solutions when preferred paths are blocked
- **Scalability**: Works well for both simple NPCs and complex characters

## Implementation Example

In a typical GOAP system, you might define:

```
// World state properties
enum WorldProperty {
    HasWeapon,
    EnemyVisible,
    LowHealth,
    HasCover,
    ...
}

// Action definition
class GOAPAction {
    Dictionary<WorldProperty, bool> preconditions;
    Dictionary<WorldProperty, bool> effects;
    float cost;
    
    bool CheckPreconditions(WorldState state);
    void ApplyEffects(ref WorldState state);
    IEnumerator Execute();
}

// Goal definition
class GOAPGoal {
    Dictionary<WorldProperty, bool> desiredState;
    float priority;
}
```

## Real-World Examples

GOAP has been used in games like:
- **F.E.A.R.** - Pioneered GOAP for tactical combat AI
- **Empire: Total War** - Used for both strategic and tactical decision-making
- **Fallout 3/4** - Combined with utility-based decision making for complex NPCs

## Modern Enhancements to GOAP

Contemporary implementations often extend GOAP with:

1. **Hierarchical Planning**: Breaking complex goals into subgoals
2. **Dynamic Action Costs**: Adjusting costs based on character personality/state
3. **Utility Considerations**: Blending planning with utility theory for better decisions
4. **Memory Systems**: Allowing NPCs to remember past events and adapt plans
5. **Emotional Modeling**: Influencing planning based on simulated emotions

Would you like me to dive deeper into any specific aspect of GOAP, such as implementation details, comparisons with other AI approaches, or optimization techniques?